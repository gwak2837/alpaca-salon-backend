type Comment {
  contents: NonEmptyString!
  creationTime: DateTime!
  id: ID!
  imageUrl: URL
  isLiked: Boolean!
  isModified: Boolean!
  likedCount: NonNegativeInt!
  modificationTime: DateTime!

  """
  이 댓글의 상위 댓글
  """
  parentComment: Comment

  """
  이 댓글이 달린 피드
  """
  post: Post!

  """
  대댓글
  """
  subcomments: [Comment!]

  """
  댓글을 작성한 사용자
  """
  user: User!
}

scalar Date

scalar DateTime

scalar EmailAddress

enum Gender {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

scalar JWT

scalar LastValue

scalar Latitude

scalar Longitude

type Mutation {
  createComment(commentId: ID, contents: NonEmptyString!, postId: ID!): Comment
  createPost(input: PostCreationInput!): Post
  deletePost(id: ID!): Post

  """
  JWT 인증 토큰과 같이 요청하면 로그아웃 성공 여부를 반환함
  """
  logout: Boolean!
  toggleLikingComment(id: ID!): Comment

  """
  회원탈퇴 시 사용자 정보가 모두 초기화됩
  """
  unregister: User
  updateComment(contents: NonEmptyString!, id: ID!): Comment
  updatePost(input: PostModificationInput!): Post
  updateUser(input: UserModificationInput!): User
}

scalar NonEmptyString

scalar NonNegativeInt

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: LastValue
  limit: PositiveInt!
}

scalar PositiveInt

type Post {
  category: PostCategory!
  commentCount: NonNegativeInt!
  contents: NonEmptyString!
  creationTime: DateTime!

  """
  피드에 달린 해시태그
  """
  hashtags: [NonEmptyString!]
  id: ID!
  imageUrls: [URL!]

  """
  피드 좋아요 여부 (로그인 필요)
  """
  isLiked: Boolean!
  modificationTime: DateTime!
  title: NonEmptyString!

  """
  글쓴이
  """
  user: User!
}

enum PostCategory {
  FREE_TOPIC
  MENOPAUSE
  UNDEFINED
}

input PostCreationInput {
  category: PostCategory
  contents: String!
  imageUrls: [URL!]
  title: String!
}

input PostModificationInput {
  category: PostCategory
  contents: String
  id: ID!
  title: String
}

"""
OAuth 공급자
"""
enum Provider {
  ALPACA_SALON
  KAKAO
}

type Query {
  """
  특정 게시글에 달린 댓글
  """
  commentsByPost(postId: ID!): [Comment!]

  """
  이번 달 핫한 이야기
  """
  famousPosts: [Post!]

  """
  사용자 닉네임 중복 여부 검사
  """
  isNicknameUnique(nickname: NonEmptyString!): Boolean!

  """
  좋아요 누른 댓글
  """
  likedComments: [Comment!]

  """
  현재 로그인된(JWT) 사용자 정보를 반환
  """
  me: User

  """
  내가 쓴 댓글
  """
  myComments: [Comment!]

  """
  글 상세
  """
  post(id: ID!): Post

  """
  글 목록
  """
  posts(pagination: Pagination!): [Post!]

  """
  글 검색
  """
  searchPosts(keywords: [NonEmptyString!]!): [Post!]

  """
  닉네임으로 사용자 검색
  """
  userByNickname(nickname: NonEmptyString!): User
}

scalar URL

scalar UUID

type User {
  bio: NonEmptyString
  birthday: NonEmptyString
  birthyear: Int
  creationTime: DateTime!
  email: EmailAddress
  gender: Gender
  id: UUID!
  imageUrl: URL
  likedCount: Int!
  modificationTime: DateTime!
  nickname: NonEmptyString
  phoneNumber: NonEmptyString
  providers: [Provider!]!
}

type UserAuthentication {
  jwt: JWT!
  nickname: NonEmptyString!
}

input UserModificationInput {
  ageRange: NonEmptyString
  bio: String
  birthday: NonEmptyString
  email: EmailAddress
  gender: Gender
  imageUrl: URL
  nickname: NonEmptyString
  phoneNumber: NonEmptyString
}
